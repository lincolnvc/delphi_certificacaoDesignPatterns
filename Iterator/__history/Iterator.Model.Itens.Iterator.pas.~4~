unit Iterator.Model.Itens.Iterator;

interface

uses Iterator.Model.Interfaces, System.Generics.Collections;

Type
  TModelItensIterator = class(TInterfacedObject, iIteratorItens)
  private
    FLista : TList<iItens>;
  public
    constructor Create;
    destructor Destroy; override;
    class function New: iIteratorItens;
    function hasNext: boolean;
    function Next: iItens;
    function AddList(Value: TList<iItens>): iIteratorItens;
  end;

implementation

{ TModelItensIterator }

function TModelItensIterator.AddList(Value: TList<iItens>): iIteratorItens;
begin
  Result := Self;
end;

constructor TModelItensIterator.Create;
begin

end;

destructor TModelItensIterator.Destroy;
begin

  inherited;
end;

function TModelItensIterator.hasNext: boolean;
begin

end;

class function TModelItensIterator.New: iIteratorItens;
begin
  Result := Self.Create;
end;

function TModelItensIterator.Next: iItens;
begin

end;

end.
