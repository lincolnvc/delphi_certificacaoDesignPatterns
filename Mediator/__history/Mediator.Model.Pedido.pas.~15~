unit Mediator.Model.Pedido;

interface

uses Mediator.Model.Interfaces;

Type
  TModelPedido = class(TInterfacedObject, iColleague, iDisplay<iColleague>)
    private
      FDestino, FOrigem : iColleague;
      FMediator : iMediator;
      FSetor, FName : String;
      FDisplay : TEvExibir;
    public
      constructor Create(Value : iMediator; Name : String);
      destructor Destroy; override;
      class function New(Value : iMediator; Name : String) : iColleague;
      function EnviarPedido(FDestino : iColleague; Setor : String) : iColleague;
      function ReceberPedido(FOrigem : iColleague; Setor : String) : iColleague;
      function GetName : String;
      function Display : iDisplay<iColleague>;
      function Exibir(Value : TEvExibir) : iDisplay<iColleague>;
      function &End : iColleague;
  end;

implementation

{ TModelPedido }

function TModelPedido.&End: iColleague;
begin
  Result := Self;
end;

constructor TModelPedido.Create(Value : iMediator; Name : String);
begin
  FMediator := Value;
  FName := Name;
end;

destructor TModelPedido.Destroy;
begin

  inherited;
end;

function TModelPedido.Display: iDisplay<iColleague>;
begin
  Result := Self;
end;

function TModelPedido.EnviarPedido(FDestino: iColleague;
  Setor: String): iColleague;
begin

end;

function TModelPedido.Exibir(Value: TEvExibir): iDisplay<iColleague>;
begin
  Result := Self;
  FDisplay := Value;
end;

function TModelPedido.GetName: String;
begin
  Result := FSetor;
end;

class function TModelPedido.New(Value : iMediator; Name : String): iColleague;
begin
  Result := Self.Create(Value, Name);
end;

function TModelPedido.ReceberPedido(FOrigem: iColleague;
  Setor: String): iColleague;
begin

end;

end.
